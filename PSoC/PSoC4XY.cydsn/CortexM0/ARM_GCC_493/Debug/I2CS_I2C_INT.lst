ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"I2CS_I2C_INT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.I2CS_I2C_ISR,"ax",%progbits
  18              		.align	2
  19              		.global	I2CS_I2C_ISR
  20              		.code	16
  21              		.thumb_func
  22              		.type	I2CS_I2C_ISR, %function
  23              	I2CS_I2C_ISR:
  24              	.LFB0:
  25              		.file 1 ".\\Generated_Source\\PSoC4\\I2CS_I2C_INT.c"
   1:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** * File Name: I2CS_I2C_INT.c
   3:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** * Version 3.10
   4:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** *
   5:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** * Description:
   6:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** *  This file provides the source code to the Interrupt Service Routine for
   7:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** *  the SCB Component in I2C mode.
   8:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** *
   9:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** * Note:
  10:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** *
  11:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** * Copyright 2013-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
  18:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** #include "I2CS_PVT.h"
  19:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** #include "I2CS_I2C_PVT.h"
  20:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** #include "cyapicallbacks.h"
  21:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
  22:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
  23:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** /*******************************************************************************
  24:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** * Function Name: I2CS_I2C_ISR
  25:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** ********************************************************************************
  26:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** *
  27:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** * Summary:
  28:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** *  Handles the Interrupt Service Routine for the SCB I2C mode.
  29:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** *
  30:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** * Parameters:
  31:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** *  None
  32:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** *
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 2


  33:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** * Return:
  34:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** *  None
  35:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** *
  36:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** *******************************************************************************/
  37:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** CY_ISR(I2CS_I2C_ISR)
  38:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** {
  26              		.loc 1 38 0
  27              		.cfi_startproc
  28 0000 10B5     		push	{r4, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 4, -8
  31              		.cfi_offset 14, -4
  32              	.LVL0:
  39:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     uint32 diffCount;
  40:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     uint32 endTransfer;
  41:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
  42:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** #ifdef I2CS_I2C_ISR_ENTRY_CALLBACK
  43:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     I2CS_I2C_ISR_EntryCallback();
  44:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** #endif /* I2CS_I2C_ISR_ENTRY_CALLBACK */
  45:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     
  46:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** #if (I2CS_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
  47:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     uint32 response;
  48:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
  49:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     response = I2CS_I2C_ACK_ADDR;
  50:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** #endif /* (I2CS_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
  51:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
  52:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     endTransfer = 0u; /* Continue active transfer */
  53:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
  54:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     /* Calls customer routine if registered */
  55:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     if(NULL != I2CS_customIntrHandler)
  33              		.loc 1 55 0
  34 0002 C04B     		ldr	r3, .L37
  35 0004 1B68     		ldr	r3, [r3]
  36 0006 002B     		cmp	r3, #0
  37 0008 00D0     		beq	.L2
  56:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     {
  57:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         I2CS_customIntrHandler();
  38              		.loc 1 57 0
  39 000a 9847     		blx	r3
  40              	.LVL1:
  41              	.L2:
  58:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     }
  59:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
  60:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     if(I2CS_CHECK_INTR_I2C_EC_MASKED(I2CS_INTR_I2C_EC_WAKE_UP))
  42              		.loc 1 60 0
  43 000c BE4B     		ldr	r3, .L37+4
  44 000e 1B68     		ldr	r3, [r3]
  45 0010 DB07     		lsl	r3, r3, #31
  46 0012 02D5     		bpl	.L3
  61:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     {
  62:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         /* Mask-off after wakeup */
  63:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         I2CS_SetI2CExtClkInterruptMode(I2CS_NO_INTR_SOURCES);
  47              		.loc 1 63 0
  48 0014 0022     		mov	r2, #0
  49 0016 BD4B     		ldr	r3, .L37+8
  50 0018 1A60     		str	r2, [r3]
  51              	.L3:
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 3


  64:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     }
  65:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
  66:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     /* Master and Slave error tracking:
  67:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     * Add the master state check to track only the master errors when the master is active or
  68:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     * track slave errors when the slave is active or idle.
  69:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     * A special MMS case: in the address phase with misplaced Start: the master sets the LOST_ARB a
  70:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     * slave BUS_ERR. The valid event is LOST_ARB comes from the master.
  71:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     */
  72:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     if(I2CS_CHECK_I2C_FSM_MASTER)
  52              		.loc 1 72 0
  53 001a BD4B     		ldr	r3, .L37+12
  54 001c 1B78     		ldrb	r3, [r3]
  55 001e 9B06     		lsl	r3, r3, #26
  56 0020 1FD4     		bmi	.L4
  73:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     {
  74:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         #if(I2CS_I2C_MASTER)
  75:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         {
  76:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             /* INTR_MASTER_I2C_BUS_ERROR:
  77:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * A misplaced Start or Stop condition occurred on the bus: complete the transaction.
  78:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * The interrupt is cleared in I2C_FSM_EXIT_IDLE.
  79:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             */
  80:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             if(I2CS_CHECK_INTR_MASTER_MASKED(I2CS_INTR_MASTER_I2C_BUS_ERROR))
  81:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             {
  82:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_mstrStatus |= (uint16) (I2CS_I2C_MSTAT_ERR_XFER |
  83:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                                          I2CS_I2C_MSTAT_ERR_BUS_ERROR);
  84:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
  85:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 endTransfer = I2CS_I2C_CMPLT_ANY_TRANSFER;
  86:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             }
  87:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
  88:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             /* INTR_MASTER_I2C_ARB_LOST:
  89:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * The MultiMaster lost arbitrage during transaction.
  90:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * A Misplaced Start or Stop condition is treated as lost arbitration when the master dr
  91:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * The interrupt source is cleared in I2C_FSM_EXIT_IDLE.
  92:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             */
  93:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             if(I2CS_CHECK_INTR_MASTER_MASKED(I2CS_INTR_MASTER_I2C_ARB_LOST))
  94:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             {
  95:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_mstrStatus |= (uint16) (I2CS_I2C_MSTAT_ERR_XFER |
  96:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                                          I2CS_I2C_MSTAT_ERR_ARB_LOST);
  97:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
  98:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 endTransfer = I2CS_I2C_CMPLT_ANY_TRANSFER;
  99:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             }
 100:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 101:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             #if(I2CS_I2C_MULTI_MASTER_SLAVE)
 102:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             {
 103:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 /* I2C_MASTER_CMD_M_START_ON_IDLE:
 104:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 * MultiMaster-Slave does not generate start, because Slave was addressed.
 105:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 * Pass control to slave.
 106:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 */
 107:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 if(I2CS_CHECK_I2C_MASTER_CMD(I2CS_I2C_MASTER_CMD_M_START_ON_IDLE))
 108:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 109:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_mstrStatus |= (uint16) (I2CS_I2C_MSTAT_ERR_XFER |
 110:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                                              I2CS_I2C_MSTAT_ERR_ABORT_XFER);
 111:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 112:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     endTransfer = I2CS_I2C_CMPLT_ANY_TRANSFER;
 113:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 114:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             }
 115:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             #endif
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 4


 116:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 117:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             /* The error handling common part:
 118:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * Sets a completion flag of the master transaction and passes control to:
 119:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             *  - I2C_FSM_EXIT_IDLE - to complete transaction in case of: ARB_LOST or BUS_ERR.
 120:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             *  - I2C_FSM_IDLE      - to take chance for the slave to process incoming transaction.
 121:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             */
 122:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             if(0u != endTransfer)
 123:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             {
 124:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 /* Set completion flags for master */
 125:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_mstrStatus |= (uint16) I2CS_GET_I2C_MSTAT_CMPLT;
 126:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 127:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 #if(I2CS_I2C_MULTI_MASTER_SLAVE)
 128:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 129:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     if(I2CS_CHECK_I2C_FSM_ADDR)
 130:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     {
 131:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* Start generation is set after another master starts accessing Slave.
 132:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * Clean-up master and turn to slave. Set state to IDLE.
 133:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         */
 134:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         if(I2CS_CHECK_I2C_MASTER_CMD(I2CS_I2C_MASTER_CMD_M_START_ON_IDLE))
 135:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 136:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_I2C_MASTER_CLEAR_START;
 137:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 138:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             endTransfer = I2CS_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave */
 139:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
 140:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* Valid arbitration lost on the address phase happens only when: master LO
 141:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * slave BUS_ERR is cleared. Only in that case set the state to IDLE without
 142:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         */
 143:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         else if((!I2CS_CHECK_INTR_SLAVE_MASKED(I2CS_INTR_SLAVE_I2C_BUS_ERROR))
 144:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                && I2CS_CHECK_INTR_MASTER_MASKED(I2CS_INTR_MASTER_I2C_ARB_LOST))
 145:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 146:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             endTransfer = I2CS_I2C_CMPLT_ANY_TRANSFER; /* Pass control to Slave */
 147:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
 148:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         else
 149:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 150:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             endTransfer = 0u; /* Causes I2C_FSM_EXIT_IDLE to be set below */
 151:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
 152:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 153:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         if(0u != endTransfer) /* Clean-up master to proceed with slave */
 154:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 155:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_CLEAR_TX_FIFO; /* Shifter keeps address, clear it */
 156:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 157:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_DISABLE_MASTER_AUTO_DATA_ACK; /* In case of reading disable autoAC
 158:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 159:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             /* Clean-up master interrupt sources */
 160:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_ClearMasterInterruptSource(I2CS_INTR_MASTER_ALL);
 161:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 162:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             /* Disable data processing interrupts: they have to be cleared before *
 163:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_SetRxInterruptMode(I2CS_NO_INTR_SOURCES);
 164:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_SetTxInterruptMode(I2CS_NO_INTR_SOURCES);
 165:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 166:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_state = I2CS_I2C_FSM_IDLE;
 167:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
 168:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         else
 169:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 170:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             /* Set I2C_FSM_EXIT_IDLE for BUS_ERR and ARB_LOST (that is really bus e
 171:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_state = I2CS_I2C_FSM_EXIT_IDLE;
 172:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 5


 173:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     }
 174:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     else
 175:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     {
 176:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* Set I2C_FSM_EXIT_IDLE if any other state than address */
 177:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_state = I2CS_I2C_FSM_EXIT_IDLE;
 178:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     }
 179:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 180:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 #else
 181:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 182:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* In case of LOST*/
 183:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_state = I2CS_I2C_FSM_EXIT_IDLE;
 184:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 185:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 #endif
 186:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             }
 187:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         }
 188:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         #endif
 189:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     }
 190:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     else /* (I2CS_CHECK_I2C_FSM_SLAVE) */
 191:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     {
 192:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         #if(I2CS_I2C_SLAVE)
 193:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         {
 194:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             /* INTR_SLAVE_I2C_BUS_ERROR or I2CS_INTR_SLAVE_I2C_ARB_LOST:
 195:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * A Misplaced Start or Stop condition occurred on the bus: set a flag
 196:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * to notify an error condition.
 197:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             */
 198:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             if(I2CS_CHECK_INTR_SLAVE_MASKED(I2CS_INTR_SLAVE_I2C_BUS_ERROR |
  57              		.loc 1 198 0
  58 0022 BC4B     		ldr	r3, .L37+16
  59 0024 1A68     		ldr	r2, [r3]
  60 0026 0223     		mov	r3, #2
  61 0028 FF33     		add	r3, r3, #255
  62 002a 1A42     		tst	r2, r3
  63 002c 19D0     		beq	.L4
 199:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                                         I2CS_INTR_SLAVE_I2C_ARB_LOST))
 200:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             {
 201:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 if(I2CS_CHECK_I2C_FSM_RD)
  64              		.loc 1 201 0
  65 002e B84B     		ldr	r3, .L37+12
  66 0030 1B78     		ldrb	r3, [r3]
  67 0032 DB07     		lsl	r3, r3, #31
  68 0034 09D5     		bpl	.L5
 202:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 203:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* TX direction: master reads from slave */
 204:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_slStatus &= (uint8) ~I2CS_I2C_SSTAT_RD_BUSY;
  69              		.loc 1 204 0
  70 0036 B84B     		ldr	r3, .L37+20
  71 0038 1A78     		ldrb	r2, [r3]
  72 003a 0221     		mov	r1, #2
  73 003c 8A43     		bic	r2, r1
  74 003e 1A70     		strb	r2, [r3]
 205:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_slStatus |= (uint8) (I2CS_I2C_SSTAT_RD_ERR |
  75              		.loc 1 205 0
  76 0040 1978     		ldrb	r1, [r3]
  77 0042 0922     		mov	r2, #9
  78 0044 0A43     		orr	r2, r1
  79 0046 1A70     		strb	r2, [r3]
  80 0048 08E0     		b	.L6
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 6


  81              	.L5:
 206:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                                           I2CS_I2C_SSTAT_RD_CMPLT);
 207:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 208:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 else
 209:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 210:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* RX direction: master writes into slave */
 211:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_slStatus &= (uint8) ~I2CS_I2C_SSTAT_WR_BUSY;
  82              		.loc 1 211 0
  83 004a B34B     		ldr	r3, .L37+20
  84 004c 1A78     		ldrb	r2, [r3]
  85 004e 2021     		mov	r1, #32
  86 0050 8A43     		bic	r2, r1
  87 0052 1A70     		strb	r2, [r3]
 212:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_slStatus |= (uint8) (I2CS_I2C_SSTAT_WR_ERR |
  88              		.loc 1 212 0
  89 0054 1978     		ldrb	r1, [r3]
  90 0056 9022     		mov	r2, #144
  91 0058 0A43     		orr	r2, r1
  92 005a 1A70     		strb	r2, [r3]
  93              	.L6:
 213:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                                           I2CS_I2C_SSTAT_WR_CMPLT);
 214:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 215:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 216:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_state = I2CS_I2C_FSM_EXIT_IDLE;
  94              		.loc 1 216 0
  95 005c 0022     		mov	r2, #0
  96 005e AC4B     		ldr	r3, .L37+12
  97 0060 1A70     		strb	r2, [r3]
  98              	.L4:
 217:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             }
 218:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         }
 219:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         #endif
 220:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     }
 221:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 222:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     /* States description:
 223:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     * Any Master operation starts from: the ADDR_RD/WR state as the master generates traffic on the
 224:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     * Any Slave operation starts from: the IDLE state as the slave always waits for actions from th
 225:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     */
 226:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 227:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     /* FSM Master */
 228:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     if(I2CS_CHECK_I2C_FSM_MASTER)
  99              		.loc 1 228 0
 100 0062 AB4B     		ldr	r3, .L37+12
 101 0064 1B78     		ldrb	r3, [r3]
 102 0066 9B06     		lsl	r3, r3, #26
 103 0068 00D5     		bpl	.LCB95
 104 006a B6E1     		b	.L7	@long jump
 105              	.LCB95:
 229:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     {
 230:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         #if(I2CS_I2C_MASTER)
 231:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         {
 232:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             /* INTR_MASTER_I2C_STOP:
 233:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * A Stop condition was generated by the master: the end of the transaction.
 234:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * Set completion flags to notify the API.
 235:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             */
 236:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             if(I2CS_CHECK_INTR_MASTER_MASKED(I2CS_INTR_MASTER_I2C_STOP))
 237:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             {
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 7


 238:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_ClearMasterInterruptSource(I2CS_INTR_MASTER_I2C_STOP);
 239:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 240:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_mstrStatus |= (uint16) I2CS_GET_I2C_MSTAT_CMPLT;
 241:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_state       = I2CS_I2C_FSM_IDLE;
 242:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             }
 243:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             else
 244:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             {
 245:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 if(I2CS_CHECK_I2C_FSM_ADDR) /* Address stage */
 246:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 247:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* INTR_MASTER_I2C_NACK:
 248:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     * The master sent an address but it was NACKed by the slave. Complete transacti
 249:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     */
 250:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     if(I2CS_CHECK_INTR_MASTER_MASKED(I2CS_INTR_MASTER_I2C_NACK))
 251:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     {
 252:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_ClearMasterInterruptSource(I2CS_INTR_MASTER_I2C_NACK);
 253:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 254:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_mstrStatus |= (uint16) (I2CS_I2C_MSTAT_ERR_XFER |
 255:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                                                  I2CS_I2C_MSTAT_ERR_ADDR_NAK);
 256:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 257:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         endTransfer = I2CS_I2C_CMPLT_ANY_TRANSFER;
 258:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     }
 259:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* INTR_TX_UNDERFLOW. The master sent an address:
 260:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     *  - TX direction: the clock is stretched after the ACK phase, because the TX F
 261:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     *    EMPTY. The TX EMPTY cleans all the TX interrupt sources.
 262:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     *  - RX direction: the 1st byte is received, but there is no ACK permission,
 263:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     *    the clock is stretched after 1 byte is received.
 264:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     */
 265:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     else
 266:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     {
 267:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         if(I2CS_CHECK_I2C_FSM_RD) /* Reading */
 268:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 269:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_state = I2CS_I2C_FSM_MSTR_RD_DATA;
 270:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
 271:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         else /* Writing */
 272:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 273:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_state = I2CS_I2C_FSM_MSTR_WR_DATA;
 274:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             if(0u != I2CS_mstrWrBufSize)
 275:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             {
 276:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 /* Enable INTR.TX_EMPTY if there is data to transmit */
 277:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 I2CS_SetTxInterruptMode(I2CS_INTR_TX_EMPTY);
 278:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             }
 279:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
 280:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     }
 281:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 282:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 283:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 if(I2CS_CHECK_I2C_FSM_DATA) /* Data phase */
 284:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 285:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     if(I2CS_CHECK_I2C_FSM_RD) /* Reading */
 286:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     {
 287:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* INTR_RX_FULL:
 288:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * RX direction: the master received 8 bytes.
 289:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * Get data from RX FIFO and decide whether to ACK or  NACK the following by
 290:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         */
 291:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         if(I2CS_CHECK_INTR_RX_MASKED(I2CS_INTR_RX_FULL))
 292:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 293:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             /* Calculate difference */
 294:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             diffCount =  I2CS_mstrRdBufSize -
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 8


 295:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                         (I2CS_mstrRdBufIndex + I2CS_GET_RX_FIFO_ENTRIES);
 296:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 297:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             /* Proceed transaction or end it when RX FIFO becomes FULL again */
 298:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             if(diffCount > I2CS_I2C_FIFO_SIZE)
 299:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             {
 300:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 diffCount = I2CS_I2C_FIFO_SIZE;
 301:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             }
 302:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             else
 303:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             {
 304:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 if(0u == diffCount)
 305:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 {
 306:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     I2CS_DISABLE_MASTER_AUTO_DATA_ACK;
 307:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 308:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     diffCount   = I2CS_I2C_FIFO_SIZE;
 309:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     endTransfer = I2CS_I2C_CMPLT_ANY_TRANSFER;
 310:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 }
 311:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             }
 312:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 313:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             for(; (0u != diffCount); diffCount--)
 314:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             {
 315:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 I2CS_mstrRdBufPtr[I2CS_mstrRdBufIndex] = (uint8)
 316:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                                                                         I2CS_RX_FIF
 317:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 I2CS_mstrRdBufIndex++;
 318:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             }
 319:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
 320:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* INTR_RX_NOT_EMPTY:
 321:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * RX direction: the master received one data byte, ACK or NACK it.
 322:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * The last byte is stored and NACKed by the master. The NACK and Stop is
 323:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * generated by one command generate Stop.
 324:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         */
 325:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         else if(I2CS_CHECK_INTR_RX_MASKED(I2CS_INTR_RX_NOT_EMPTY))
 326:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 327:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             /* Put data in component buffer */
 328:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_mstrRdBufPtr[I2CS_mstrRdBufIndex] = (uint8) I2CS_RX_FIFO_RD_REG;
 329:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_mstrRdBufIndex++;
 330:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 331:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             if(I2CS_mstrRdBufIndex < I2CS_mstrRdBufSize)
 332:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             {
 333:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 I2CS_I2C_MASTER_GENERATE_ACK;
 334:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             }
 335:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             else
 336:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             {
 337:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                endTransfer = I2CS_I2C_CMPLT_ANY_TRANSFER;
 338:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             }
 339:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
 340:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         else
 341:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 342:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             /* Do nothing */
 343:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
 344:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 345:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_ClearRxInterruptSource(I2CS_INTR_RX_ALL);
 346:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     }
 347:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     else /* Writing */
 348:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     {
 349:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* INTR_MASTER_I2C_NACK :
 350:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * The master writes data to the slave and NACK was received: not all the by
 351:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * written to the slave from the TX FIFO. Revert the index if there is data 
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 9


 352:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * the TX FIFO and pass control to a complete transfer.
 353:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         */
 354:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         if(I2CS_CHECK_INTR_MASTER_MASKED(I2CS_INTR_MASTER_I2C_NACK))
 355:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 356:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_ClearMasterInterruptSource(I2CS_INTR_MASTER_I2C_NACK);
 357:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 358:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             /* Rollback write buffer index: NACKed byte remains in shifter */
 359:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_mstrWrBufIndexTmp -= (I2CS_GET_TX_FIFO_ENTRIES +
 360:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                                                    I2CS_GET_TX_FIFO_SR_VALID);
 361:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 362:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             /* Update number of transferred bytes */
 363:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_mstrWrBufIndex = I2CS_mstrWrBufIndexTmp;
 364:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 365:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_mstrStatus |= (uint16) (I2CS_I2C_MSTAT_ERR_XFER |
 366:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                                                      I2CS_I2C_MSTAT_ERR_SHORT_XFER)
 367:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 368:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_CLEAR_TX_FIFO;
 369:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 370:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             endTransfer = I2CS_I2C_CMPLT_ANY_TRANSFER;
 371:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
 372:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* INTR_TX_EMPTY :
 373:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * TX direction: the TX FIFO is EMPTY, the data from the buffer needs to be 
 374:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * When there is no data in the component buffer, the underflow interrupt is
 375:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * enabled to catch when all the data has been transferred.
 376:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         */
 377:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         else if(I2CS_CHECK_INTR_TX_MASKED(I2CS_INTR_TX_EMPTY))
 378:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 379:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             while(I2CS_I2C_FIFO_SIZE != I2CS_GET_TX_FIFO_ENTRIES)
 380:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             {
 381:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 /* The temporary mstrWrBufIndexTmp is used because slave could NACK
 382:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 * roll-back required in this case. The mstrWrBufIndex is updated at
 383:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 */
 384:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 if(I2CS_mstrWrBufIndexTmp < I2CS_mstrWrBufSize)
 385:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 {
 386:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 #if(!I2CS_CY_SCBIP_V0)
 387:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                    /* Clear INTR_TX.UNDERFLOW before putting the last byte into TX 
 388:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     * a proper trigger at the end of transaction when INTR_TX.UNDER
 389:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     * event. Ticket ID# 156735.
 390:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     */
 391:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     if(I2CS_mstrWrBufIndexTmp == (I2CS_mstrWrBufSize - 1u))
 392:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     {
 393:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                         I2CS_ClearTxInterruptSource(I2CS_INTR_TX_UNDERFLOW);
 394:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                         I2CS_SetTxInterruptMode(I2CS_INTR_TX_UNDERFLOW);
 395:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     }
 396:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                  #endif /* (!I2CS_CY_SCBIP_V0) */
 397:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 398:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     /* Put data into TX FIFO */
 399:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     I2CS_TX_FIFO_WR_REG = (uint32) I2CS_mstrWrBufPtr[I2CS_mstrWrBuf
 400:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     I2CS_mstrWrBufIndexTmp++;
 401:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 }
 402:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 else
 403:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 {
 404:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     break; /* No more data to put */
 405:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 }
 406:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             }
 407:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 408:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         #if(I2CS_CY_SCBIP_V0)
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 10


 409:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             if(I2CS_mstrWrBufIndexTmp == I2CS_mstrWrBufSize)
 410:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             {
 411:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 I2CS_SetTxInterruptMode(I2CS_INTR_TX_UNDERFLOW);
 412:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             }
 413:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 414:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_ClearTxInterruptSource(I2CS_INTR_TX_ALL);
 415:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         #else
 416:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_ClearTxInterruptSource(I2CS_INTR_TX_EMPTY);
 417:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         #endif /* (I2CS_CY_SCBIP_V0) */
 418:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
 419:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* INTR_TX_UNDERFLOW:
 420:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * TX direction: all data from the TX FIFO was transferred to the slave.
 421:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * The transaction needs to be completed.
 422:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         */
 423:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         else if(I2CS_CHECK_INTR_TX_MASKED(I2CS_INTR_TX_UNDERFLOW))
 424:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 425:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             /* Update number of transferred bytes */
 426:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_mstrWrBufIndex = I2CS_mstrWrBufIndexTmp;
 427:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 428:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             endTransfer = I2CS_I2C_CMPLT_ANY_TRANSFER;
 429:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
 430:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         else
 431:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 432:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             /* Do nothing */
 433:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
 434:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     }
 435:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 436:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 437:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 if(0u != endTransfer) /* Complete transfer */
 438:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 439:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* Clean-up master after reading: only in case of NACK */
 440:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_DISABLE_MASTER_AUTO_DATA_ACK;
 441:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 442:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* Disable data processing interrupts: they have to be cleared before */
 443:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_SetRxInterruptMode(I2CS_NO_INTR_SOURCES);
 444:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_SetTxInterruptMode(I2CS_NO_INTR_SOURCES);
 445:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 446:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     if(I2CS_CHECK_I2C_MODE_NO_STOP(I2CS_mstrControl))
 447:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     {
 448:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* On-going transaction is suspended: the ReStart is generated by the API r
 449:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_mstrStatus |= (uint16) (I2CS_I2C_MSTAT_XFER_HALT |
 450:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                                                  I2CS_GET_I2C_MSTAT_CMPLT);
 451:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 452:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_state = I2CS_I2C_FSM_MSTR_HALT;
 453:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     }
 454:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     else
 455:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     {
 456:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* Complete transaction: exclude the data processing state and generate Sto
 457:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * The completion status will be set after Stop generation.
 458:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * A special case is read: because NACK and Stop are generated by the comman
 459:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * Lost arbitration can occur during NACK generation when
 460:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * the other master is still reading from the slave.
 461:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         */
 462:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_I2C_MASTER_GENERATE_STOP;
 463:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     }
 464:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 465:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             }
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 11


 466:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 467:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         } /* (I2CS_I2C_MASTER) */
 468:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         #endif
 469:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 470:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     } /* (I2CS_CHECK_I2C_FSM_MASTER) */
 471:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 472:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 473:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     /* FSM Slave */
 474:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     else if(I2CS_CHECK_I2C_FSM_SLAVE)
 106              		.loc 1 474 0
 107 006c A84B     		ldr	r3, .L37+12
 108 006e 1B78     		ldrb	r3, [r3]
 109 0070 DB06     		lsl	r3, r3, #27
 110 0072 00D4     		bmi	.LCB103
 111 0074 8AE1     		b	.L8	@long jump
 112              	.LCB103:
 475:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     {
 476:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         #if(I2CS_I2C_SLAVE)
 477:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         {
 478:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             /* INTR_SLAVE_NACK:
 479:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * The master completes reading the slave: the appropriate flags have to be set.
 480:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * The TX FIFO is cleared after an overflow condition is set.
 481:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             */
 482:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             if(I2CS_CHECK_INTR_SLAVE_MASKED(I2CS_INTR_SLAVE_I2C_NACK))
 113              		.loc 1 482 0
 114 0076 A74B     		ldr	r3, .L37+16
 115 0078 1B68     		ldr	r3, [r3]
 116 007a 9B07     		lsl	r3, r3, #30
 117 007c 3ED5     		bpl	.L9
 483:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             {
 484:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_ClearSlaveInterruptSource(I2CS_INTR_SLAVE_I2C_NACK);
 118              		.loc 1 484 0
 119 007e 0222     		mov	r2, #2
 120 0080 A64B     		ldr	r3, .L37+24
 121 0082 1A60     		str	r2, [r3]
 485:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 486:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 /* All entries that remain in TX FIFO max value is 9: 8 (FIFO) + 1 (SHIFTER) */
 487:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 diffCount = (I2CS_GET_TX_FIFO_ENTRIES + I2CS_GET_TX_FIFO_SR_VALID);
 122              		.loc 1 487 0
 123 0084 A64A     		ldr	r2, .L37+28
 124 0086 1368     		ldr	r3, [r2]
 125 0088 0F21     		mov	r1, #15
 126 008a 1940     		and	r1, r3
 127 008c 1368     		ldr	r3, [r2]
 128 008e 8022     		mov	r2, #128
 129 0090 1202     		lsl	r2, r2, #8
 130 0092 1340     		and	r3, r2
 131 0094 00D0     		beq	.L10
 132 0096 0123     		mov	r3, #1
 133              	.L10:
 134              		.loc 1 487 0 is_stmt 0 discriminator 4
 135 0098 CB18     		add	r3, r1, r3
 136              	.LVL2:
 488:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 489:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 if(I2CS_slOverFlowCount > diffCount) /* Overflow */
 137              		.loc 1 489 0 is_stmt 1 discriminator 4
 138 009a A24A     		ldr	r2, .L37+32
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 12


 139 009c 1278     		ldrb	r2, [r2]
 140 009e D2B2     		uxtb	r2, r2
 141 00a0 9A42     		cmp	r2, r3
 142 00a2 05D9     		bls	.L11
 490:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 491:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_slStatus |= (uint8) I2CS_I2C_SSTAT_RD_OVFL;
 143              		.loc 1 491 0
 144 00a4 9C4A     		ldr	r2, .L37+20
 145 00a6 1178     		ldrb	r1, [r2]
 146 00a8 0423     		mov	r3, #4
 147              	.LVL3:
 148 00aa 0B43     		orr	r3, r1
 149 00ac 1370     		strb	r3, [r2]
 150 00ae 06E0     		b	.L12
 151              	.LVL4:
 152              	.L11:
 492:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 493:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 else /* No Overflow */
 494:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 495:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* Roll-back temporary index */
 496:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_slRdBufIndexTmp -= (diffCount - I2CS_slOverFlowCount);
 153              		.loc 1 496 0
 154 00b0 9C4A     		ldr	r2, .L37+32
 155 00b2 1278     		ldrb	r2, [r2]
 156 00b4 9B1A     		sub	r3, r3, r2
 157              	.LVL5:
 158 00b6 9C49     		ldr	r1, .L37+36
 159 00b8 0A68     		ldr	r2, [r1]
 160 00ba D31A     		sub	r3, r2, r3
 161 00bc 0B60     		str	r3, [r1]
 162              	.L12:
 497:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 498:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 499:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 /* Update slave of transferred bytes */
 500:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_slRdBufIndex = I2CS_slRdBufIndexTmp;
 163              		.loc 1 500 0
 164 00be 9A4B     		ldr	r3, .L37+36
 165 00c0 1A68     		ldr	r2, [r3]
 166 00c2 9A4B     		ldr	r3, .L37+40
 167 00c4 1A60     		str	r2, [r3]
 501:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 502:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 /* Clean-up TX FIFO */
 503:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_SetTxInterruptMode(I2CS_NO_INTR_SOURCES);
 168              		.loc 1 503 0
 169 00c6 0023     		mov	r3, #0
 170 00c8 994A     		ldr	r2, .L37+44
 171 00ca 1360     		str	r3, [r2]
 504:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_slOverFlowCount = 0u;
 172              		.loc 1 504 0
 173 00cc 954A     		ldr	r2, .L37+32
 174 00ce 1370     		strb	r3, [r2]
 505:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_CLEAR_TX_FIFO;
 175              		.loc 1 505 0
 176 00d0 984B     		ldr	r3, .L37+48
 177 00d2 1A68     		ldr	r2, [r3]
 178 00d4 8021     		mov	r1, #128
 179 00d6 4902     		lsl	r1, r1, #9
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 13


 180 00d8 0A43     		orr	r2, r1
 181 00da 1A60     		str	r2, [r3]
 182 00dc 1968     		ldr	r1, [r3]
 183 00de 964A     		ldr	r2, .L37+52
 184 00e0 0A40     		and	r2, r1
 185 00e2 1A60     		str	r2, [r3]
 506:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 507:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 /* Complete master reading */
 508:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_slStatus &= (uint8) ~I2CS_I2C_SSTAT_RD_BUSY;
 186              		.loc 1 508 0
 187 00e4 8C4B     		ldr	r3, .L37+20
 188 00e6 1A78     		ldrb	r2, [r3]
 189 00e8 0221     		mov	r1, #2
 190 00ea 8A43     		bic	r2, r1
 191 00ec 1A70     		strb	r2, [r3]
 509:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_slStatus |= (uint8)  I2CS_I2C_SSTAT_RD_CMPLT;
 192              		.loc 1 509 0
 193 00ee 1978     		ldrb	r1, [r3]
 194 00f0 0122     		mov	r2, #1
 195 00f2 0A43     		orr	r2, r1
 196 00f4 1A70     		strb	r2, [r3]
 510:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_state     =  I2CS_I2C_FSM_IDLE;
 197              		.loc 1 510 0
 198 00f6 1022     		mov	r2, #16
 199 00f8 854B     		ldr	r3, .L37+12
 200 00fa 1A70     		strb	r2, [r3]
 201              	.L9:
 511:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             }
 512:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 513:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 514:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             /* INTR_SLAVE_I2C_WRITE_STOP:
 515:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * The master completes writing to the slave: the appropriate flags have to be set.
 516:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * The RX FIFO contains 1-8 bytes from the previous transaction which needs to be read.
 517:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * There is a possibility that RX FIFO contains an address, it needs to leave it there.
 518:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             */
 519:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             if(I2CS_CHECK_INTR_SLAVE_MASKED(I2CS_INTR_SLAVE_I2C_WRITE_STOP))
 202              		.loc 1 519 0
 203 00fc 854B     		ldr	r3, .L37+16
 204 00fe 1B68     		ldr	r3, [r3]
 205 0100 1B07     		lsl	r3, r3, #28
 206 0102 37D5     		bpl	.L13
 520:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             {
 521:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_ClearSlaveInterruptSource(I2CS_INTR_SLAVE_I2C_WRITE_STOP);
 207              		.loc 1 521 0
 208 0104 0822     		mov	r2, #8
 209 0106 854B     		ldr	r3, .L37+24
 210 0108 1A60     		str	r2, [r3]
 522:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 523:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 /* Read bytes from RX FIFO when auto data ACK receive logic is enabled. Otherwise a
 524:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 * were already read from the RX FIFO except for address byte which has to stay here
 525:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 * I2C_ADDR_MATCH.
 526:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 */
 527:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 if (0u != (I2CS_I2C_CTRL_REG & I2CS_I2C_CTRL_S_READY_DATA_ACK))
 211              		.loc 1 527 0
 212 010a 8C4B     		ldr	r3, .L37+56
 213 010c 1B68     		ldr	r3, [r3]
 214 010e 9B04     		lsl	r3, r3, #18
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 14


 215 0110 0CD4     		bmi	.L14
 216 0112 14E0     		b	.L15
 217              	.L16:
 528:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 529:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     while(0u != I2CS_GET_RX_FIFO_ENTRIES)
 530:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     {
 531:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         #if(I2CS_CHECK_I2C_ACCEPT_ADDRESS)
 532:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 533:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             if((1u == I2CS_GET_RX_FIFO_ENTRIES) &&
 534:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                (I2CS_CHECK_INTR_SLAVE_MASKED(I2CS_INTR_SLAVE_I2C_ADDR_MATCH)))
 535:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             {
 536:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 break; /* Leave address in RX FIFO */
 537:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             }
 538:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
 539:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         #endif
 540:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 541:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* Put data in component buffer */
 542:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_slWrBufPtr[I2CS_slWrBufIndex] = (uint8) I2CS_RX_FIFO_RD_REG;
 218              		.loc 1 542 0
 219 0114 8A4B     		ldr	r3, .L37+60
 220 0116 1A68     		ldr	r2, [r3]
 221 0118 8A49     		ldr	r1, .L37+64
 222 011a 0968     		ldr	r1, [r1]
 223 011c 8A18     		add	r2, r1, r2
 224 011e 8A49     		ldr	r1, .L37+68
 225 0120 0968     		ldr	r1, [r1]
 226 0122 C9B2     		uxtb	r1, r1
 227 0124 1170     		strb	r1, [r2]
 543:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_slWrBufIndex++;
 228              		.loc 1 543 0
 229 0126 1A68     		ldr	r2, [r3]
 230 0128 0132     		add	r2, r2, #1
 231 012a 1A60     		str	r2, [r3]
 232              	.L14:
 529:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     {
 233              		.loc 1 529 0
 234 012c 874B     		ldr	r3, .L37+72
 235 012e 1B68     		ldr	r3, [r3]
 236 0130 1B07     		lsl	r3, r3, #28
 237 0132 EFD1     		bne	.L16
 544:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     }
 545:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 546:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_DISABLE_SLAVE_AUTO_DATA;
 238              		.loc 1 546 0
 239 0134 814A     		ldr	r2, .L37+56
 240 0136 1168     		ldr	r1, [r2]
 241 0138 854B     		ldr	r3, .L37+76
 242 013a 0B40     		and	r3, r1
 243 013c 1360     		str	r3, [r2]
 244              	.L15:
 547:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 548:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 549:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 if(I2CS_CHECK_INTR_RX(I2CS_INTR_RX_OVERFLOW))
 245              		.loc 1 549 0
 246 013e 854B     		ldr	r3, .L37+80
 247 0140 1B68     		ldr	r3, [r3]
 248 0142 9B06     		lsl	r3, r3, #26
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 15


 249 0144 04D5     		bpl	.L17
 550:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 551:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_slStatus |= (uint8) I2CS_I2C_SSTAT_WR_OVFL;
 250              		.loc 1 551 0
 251 0146 744A     		ldr	r2, .L37+20
 252 0148 1178     		ldrb	r1, [r2]
 253 014a 4023     		mov	r3, #64
 254 014c 0B43     		orr	r3, r1
 255 014e 1370     		strb	r3, [r2]
 256              	.L17:
 552:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 553:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 554:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 /* Clears RX interrupt sources triggered on data receiving */
 555:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_SetRxInterruptMode(I2CS_NO_INTR_SOURCES);
 257              		.loc 1 555 0
 258 0150 0022     		mov	r2, #0
 259 0152 814B     		ldr	r3, .L37+84
 260 0154 1A60     		str	r2, [r3]
 556:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_ClearRxInterruptSource(I2CS_INTR_RX_ALL);
 261              		.loc 1 556 0
 262 0156 814A     		ldr	r2, .L37+88
 263 0158 7E4B     		ldr	r3, .L37+80
 264 015a 1A60     		str	r2, [r3]
 557:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 558:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 /* Complete master writing */
 559:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_slStatus &= (uint8) ~I2CS_I2C_SSTAT_WR_BUSY;
 265              		.loc 1 559 0
 266 015c 6E4B     		ldr	r3, .L37+20
 267 015e 1A78     		ldrb	r2, [r3]
 268 0160 2021     		mov	r1, #32
 269 0162 8A43     		bic	r2, r1
 270 0164 1A70     		strb	r2, [r3]
 560:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_slStatus |= (uint8)  I2CS_I2C_SSTAT_WR_CMPLT;
 271              		.loc 1 560 0
 272 0166 1978     		ldrb	r1, [r3]
 273 0168 1022     		mov	r2, #16
 274 016a 0A43     		orr	r2, r1
 275 016c 1A70     		strb	r2, [r3]
 561:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_state     =  I2CS_I2C_FSM_IDLE;
 276              		.loc 1 561 0
 277 016e 684B     		ldr	r3, .L37+12
 278 0170 1022     		mov	r2, #16
 279 0172 1A70     		strb	r2, [r3]
 280              	.L13:
 562:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             }
 563:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 564:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 565:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             /* INTR_SLAVE_I2C_ADDR_MATCH or INTR_SLAVE_I2C_GENERAL:
 566:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * The address match or general call address event starts the slave operation:
 567:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * after leaving the TX or RX direction has to be chosen.
 568:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * The wakeup interrupt must be cleared only after an address match is set.
 569:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             */
 570:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         #if (I2CS_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 571:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             if (I2CS_CHECK_INTR_SLAVE_MASKED(I2CS_INTR_SLAVE_I2C_ADDR_MATCH |
 572:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                                          I2CS_INTR_SLAVE_I2C_GENERAL))
 573:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         #else
 574:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             if (I2CS_CHECK_INTR_SLAVE_MASKED(I2CS_INTR_SLAVE_I2C_ADDR_MATCH))
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 16


 281              		.loc 1 574 0
 282 0174 674B     		ldr	r3, .L37+16
 283 0176 1B68     		ldr	r3, [r3]
 284 0178 5B06     		lsl	r3, r3, #25
 285 017a 41D5     		bpl	.L18
 575:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         #endif /* (I2CS_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 576:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             {
 577:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 /* Clear externally clocked address match interrupt source when internally clocked 
 578:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_ClearI2CExtClkInterruptSource(I2CS_INTR_I2C_EC_WAKE_UP);
 286              		.loc 1 578 0
 287 017c 0122     		mov	r2, #1
 288 017e 784B     		ldr	r3, .L37+92
 289 0180 1A60     		str	r2, [r3]
 579:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 580:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 #if (I2CS_I2C_CUSTOM_ADDRESS_HANDLER)
 581:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 582:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     if (NULL != I2CS_customAddressHandler)
 583:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     {
 584:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* Call custom address handler */
 585:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         response = I2CS_customAddressHandler();
 586:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     }
 587:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     else
 588:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     {
 589:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* Read address from the RX FIFO. If there is no address underflow triggers
 590:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         * componnet does not use that source. */
 591:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         (void) I2CS_RX_FIFO_RD_REG;
 592:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         response = I2CS_I2C_ACK_ADDR;
 593:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     }
 594:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 595:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* Clears RX sources after address was received in the RX FIFO */
 596:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_ClearRxInterruptSource(I2CS_INTR_RX_ALL);
 597:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 598:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 #endif
 599:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 600:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             #if (I2CS_I2C_CUSTOM_ADDRESS_HANDLER_CONST)
 601:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 if (response == I2CS_I2C_NAK_ADDR)
 602:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 603:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 #if (!I2CS_CY_SCBIP_V0)
 604:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* Disable write stop interrupt source as it triggers after address was NACKed.
 605:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_DISABLE_INTR_SLAVE(I2CS_INTR_SLAVE_I2C_WRITE_STOP);
 606:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 #endif /* (!I2CS_CY_SCBIP_V0) */
 607:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 608:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* Clear address match and stop history */
 609:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_ClearSlaveInterruptSource(I2CS_INTR_SLAVE_ALL);
 610:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 611:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* ACK the address byte */
 612:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_I2C_SLAVE_GENERATE_NACK;
 613:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 614:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 else
 615:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             #endif /* (I2CS_I2C_CUSTOM_ADDRESS_HANDLER_CONST) */
 616:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 617:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     if(I2CS_CHECK_I2C_STATUS(I2CS_I2C_STATUS_S_READ))
 290              		.loc 1 617 0
 291 0182 784B     		ldr	r3, .L37+96
 292 0184 1B68     		ldr	r3, [r3]
 293 0186 DB06     		lsl	r3, r3, #27
 294 0188 0FD5     		bpl	.L19
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 17


 618:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* TX direction: master reads from slave */
 619:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     {
 620:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_SetTxInterruptMode(I2CS_INTR_TX_EMPTY);
 295              		.loc 1 620 0
 296 018a 0F32     		add	r2, r2, #15
 297 018c 684B     		ldr	r3, .L37+44
 298 018e 1A60     		str	r2, [r3]
 621:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 622:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* Set temporary index to address buffer clear from API */
 623:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_slRdBufIndexTmp = I2CS_slRdBufIndex;
 299              		.loc 1 623 0
 300 0190 664B     		ldr	r3, .L37+40
 301 0192 1A68     		ldr	r2, [r3]
 302 0194 644B     		ldr	r3, .L37+36
 303 0196 1A60     		str	r2, [r3]
 624:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 625:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* Start master reading */
 626:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_slStatus |= (uint8) I2CS_I2C_SSTAT_RD_BUSY;
 304              		.loc 1 626 0
 305 0198 5F4A     		ldr	r2, .L37+20
 306 019a 1178     		ldrb	r1, [r2]
 307 019c 0223     		mov	r3, #2
 308 019e 0B43     		orr	r3, r1
 309 01a0 1370     		strb	r3, [r2]
 627:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_state     = I2CS_I2C_FSM_SL_RD;
 310              		.loc 1 627 0
 311 01a2 1222     		mov	r2, #18
 312 01a4 5A4B     		ldr	r3, .L37+12
 313 01a6 1A70     		strb	r2, [r3]
 314 01a8 24E0     		b	.L20
 315              	.L19:
 628:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     }
 629:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     else
 630:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* RX direction: master writes into slave */
 631:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     {
 632:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* Calculate available buffer size */
 633:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         diffCount = (I2CS_slWrBufSize - I2CS_slWrBufIndex);
 316              		.loc 1 633 0
 317 01aa 6F4B     		ldr	r3, .L37+100
 318 01ac 1B68     		ldr	r3, [r3]
 319 01ae 644A     		ldr	r2, .L37+60
 320 01b0 1268     		ldr	r2, [r2]
 321 01b2 9B1A     		sub	r3, r3, r2
 322              	.LVL6:
 634:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 635:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     #if (I2CS_CY_SCBIP_V0)
 636:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         if(diffCount < I2CS_I2C_FIFO_SIZE)
 323              		.loc 1 636 0
 324 01b4 072B     		cmp	r3, #7
 325 01b6 03D8     		bhi	.L21
 637:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* Receive data: byte-by-byte */
 638:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 639:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_SetRxInterruptMode(I2CS_INTR_RX_NOT_EMPTY);
 326              		.loc 1 639 0
 327 01b8 0422     		mov	r2, #4
 328 01ba 674B     		ldr	r3, .L37+84
 329              	.LVL7:
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 18


 330 01bc 1A60     		str	r2, [r3]
 331 01be 11E0     		b	.L22
 332              	.LVL8:
 333              	.L21:
 640:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
 641:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         else
 642:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* Receive data: into RX FIFO */
 643:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 644:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             if(diffCount == I2CS_I2C_FIFO_SIZE)
 334              		.loc 1 644 0
 335 01c0 082B     		cmp	r3, #8
 336 01c2 06D1     		bne	.L23
 645:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             {
 646:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 /* NACK when RX FIFO become FULL */
 647:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 I2CS_ENABLE_SLAVE_AUTO_DATA;
 337              		.loc 1 647 0
 338 01c4 5D4A     		ldr	r2, .L37+56
 339 01c6 1368     		ldr	r3, [r2]
 340              	.LVL9:
 341 01c8 A021     		mov	r1, #160
 342 01ca 0902     		lsl	r1, r1, #8
 343 01cc 0B43     		orr	r3, r1
 344 01ce 1360     		str	r3, [r2]
 345 01d0 08E0     		b	.L22
 346              	.LVL10:
 347              	.L23:
 648:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             }
 649:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             else
 650:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             {
 651:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 /* Stretch clock when RX FIFO becomes FULL */
 652:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 I2CS_ENABLE_SLAVE_AUTO_DATA_ACK;
 348              		.loc 1 652 0
 349 01d2 5A4A     		ldr	r2, .L37+56
 350 01d4 1368     		ldr	r3, [r2]
 351              	.LVL11:
 352 01d6 8021     		mov	r1, #128
 353 01d8 8901     		lsl	r1, r1, #6
 354 01da 0B43     		orr	r3, r1
 355 01dc 1360     		str	r3, [r2]
 653:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 I2CS_SetRxInterruptMode(I2CS_INTR_RX_FULL);
 356              		.loc 1 653 0
 357 01de 0822     		mov	r2, #8
 358 01e0 5D4B     		ldr	r3, .L37+84
 359 01e2 1A60     		str	r2, [r3]
 360              	.L22:
 654:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             }
 655:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
 656:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 657:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     #else
 658:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         #if(I2CS_CHECK_I2C_ACCEPT_ADDRESS)
 659:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 660:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             /* Enable RX.NOT_EMPTY interrupt source to receive byte by byte.
 661:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             * The byte by byte receive is always chosen for the case when an addres
 662:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             * in RX FIFO. Ticket ID#175559.
 663:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             */
 664:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_SetRxInterruptMode(I2CS_INTR_RX_NOT_EMPTY);
 665:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 19


 666:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         #else
 667:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 668:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             if(diffCount < I2CS_I2C_FIFO_SIZE)
 669:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             /* Receive data: byte-by-byte */
 670:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             {
 671:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 I2CS_SetRxInterruptMode(I2CS_INTR_RX_NOT_EMPTY);
 672:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             }
 673:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             else
 674:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             /* Receive data: into RX FIFO */
 675:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             {
 676:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 if(diffCount == I2CS_I2C_FIFO_SIZE)
 677:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 {
 678:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     /* NACK when RX FIFO become FULL */
 679:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     I2CS_ENABLE_SLAVE_AUTO_DATA;
 680:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 }
 681:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 else
 682:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 {
 683:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     /* Stretch clock when RX FIFO becomes FULL */
 684:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     I2CS_ENABLE_SLAVE_AUTO_DATA_ACK;
 685:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                     I2CS_SetRxInterruptMode(I2CS_INTR_RX_FULL);
 686:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                                 }
 687:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             }
 688:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
 689:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         #endif
 690:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     #endif /* (I2CS_CY_SCBIP_V0) */
 691:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 692:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         /* Start master reading */
 693:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_slStatus |= (uint8) I2CS_I2C_SSTAT_WR_BUSY;
 361              		.loc 1 693 0
 362 01e4 4C4A     		ldr	r2, .L37+20
 363 01e6 1178     		ldrb	r1, [r2]
 364 01e8 2023     		mov	r3, #32
 365 01ea 0B43     		orr	r3, r1
 366 01ec 1370     		strb	r3, [r2]
 694:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_state     = I2CS_I2C_FSM_SL_WR;
 367              		.loc 1 694 0
 368 01ee 1122     		mov	r2, #17
 369 01f0 474B     		ldr	r3, .L37+12
 370 01f2 1A70     		strb	r2, [r3]
 371              	.L20:
 695:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     }
 696:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 697:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* Clear address match and stop history */
 698:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_ClearSlaveInterruptSource(I2CS_INTR_SLAVE_ALL);
 372              		.loc 1 698 0
 373 01f4 5D4A     		ldr	r2, .L37+104
 374 01f6 494B     		ldr	r3, .L37+24
 375 01f8 1A60     		str	r2, [r3]
 699:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 700:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 #if (!I2CS_CY_SCBIP_V0)
 701:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* Enable write stop interrupt source as it triggers after address was NACKed. 
 702:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_ENABLE_INTR_SLAVE(I2CS_INTR_SLAVE_I2C_WRITE_STOP);
 703:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 #endif /* (!I2CS_CY_SCBIP_V0) */
 704:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 705:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* ACK the address byte */
 706:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_I2C_SLAVE_GENERATE_ACK;
 376              		.loc 1 706 0
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 20


 377 01fa 0122     		mov	r2, #1
 378 01fc 5C4B     		ldr	r3, .L37+108
 379 01fe 1A60     		str	r2, [r3]
 380              	.L18:
 707:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 708:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             }
 709:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 710:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             /* I2CS_INTR_RX_FULL:
 711:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * Get data from the RX FIFO and decide whether to ACK or NACK the following bytes
 712:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             */
 713:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             if(I2CS_CHECK_INTR_RX_MASKED(I2CS_INTR_RX_FULL))
 381              		.loc 1 713 0
 382 0200 5C4B     		ldr	r3, .L37+112
 383 0202 1B68     		ldr	r3, [r3]
 384 0204 1B07     		lsl	r3, r3, #28
 385 0206 2AD5     		bpl	.L24
 714:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             {
 715:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 /* Calculate available buffer size to take into account that RX FIFO is FULL */
 716:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 diffCount =  I2CS_slWrBufSize -
 386              		.loc 1 716 0
 387 0208 574B     		ldr	r3, .L37+100
 388 020a 1B68     		ldr	r3, [r3]
 389 020c 4C4A     		ldr	r2, .L37+60
 390 020e 1068     		ldr	r0, [r2]
 391 0210 181A     		sub	r0, r3, r0
 392 0212 0838     		sub	r0, r0, #8
 393              	.LVL12:
 717:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             (I2CS_slWrBufIndex + I2CS_I2C_FIFO_SIZE);
 718:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 719:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 if(diffCount > I2CS_I2C_FIFO_SIZE) /* Proceed transaction */
 394              		.loc 1 719 0
 395 0214 0828     		cmp	r0, #8
 396 0216 02D9     		bls	.L36
 720:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 721:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     diffCount   = I2CS_I2C_FIFO_SIZE;
 722:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     endTransfer = 0u;  /* Continue active transfer */
 397              		.loc 1 722 0
 398 0218 0024     		mov	r4, #0
 721:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     endTransfer = 0u;  /* Continue active transfer */
 399              		.loc 1 721 0
 400 021a 0820     		mov	r0, #8
 401              	.LVL13:
 402 021c 0EE0     		b	.L26
 403              	.LVL14:
 404              	.L36:
 723:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 724:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 else /* End when FIFO becomes FULL again */
 725:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 726:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     endTransfer = I2CS_I2C_CMPLT_ANY_TRANSFER;
 405              		.loc 1 726 0
 406 021e 0124     		mov	r4, #1
 407 0220 0CE0     		b	.L26
 408              	.LVL15:
 409              	.L27:
 727:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 728:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 729:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 for(; (0u != diffCount); diffCount--)
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 21


 730:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 731:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* Put data in component buffer */
 732:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_slWrBufPtr[I2CS_slWrBufIndex] = (uint8) I2CS_RX_FIFO_RD_REG;
 410              		.loc 1 732 0 discriminator 2
 411 0222 474B     		ldr	r3, .L37+60
 412 0224 1A68     		ldr	r2, [r3]
 413 0226 4749     		ldr	r1, .L37+64
 414 0228 0968     		ldr	r1, [r1]
 415 022a 8A18     		add	r2, r1, r2
 416 022c 4649     		ldr	r1, .L37+68
 417 022e 0968     		ldr	r1, [r1]
 418 0230 C9B2     		uxtb	r1, r1
 419 0232 1170     		strb	r1, [r2]
 733:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_slWrBufIndex++;
 420              		.loc 1 733 0 discriminator 2
 421 0234 1A68     		ldr	r2, [r3]
 422 0236 0132     		add	r2, r2, #1
 423 0238 1A60     		str	r2, [r3]
 729:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 424              		.loc 1 729 0 discriminator 2
 425 023a 0138     		sub	r0, r0, #1
 426              	.LVL16:
 427              	.L26:
 729:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 428              		.loc 1 729 0 is_stmt 0 discriminator 1
 429 023c 0028     		cmp	r0, #0
 430 023e F0D1     		bne	.L27
 734:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 735:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 736:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 if(0u != endTransfer) /* End transfer sending NACK */
 431              		.loc 1 736 0 is_stmt 1
 432 0240 002C     		cmp	r4, #0
 433 0242 08D0     		beq	.L28
 737:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 738:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_ENABLE_SLAVE_AUTO_DATA_NACK;
 434              		.loc 1 738 0
 435 0244 3D4A     		ldr	r2, .L37+56
 436 0246 1368     		ldr	r3, [r2]
 437 0248 8021     		mov	r1, #128
 438 024a 0902     		lsl	r1, r1, #8
 439 024c 0B43     		orr	r3, r1
 440 024e 1360     		str	r3, [r2]
 739:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 740:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* INTR_RX_FULL triggers earlier than INTR_SLAVE_I2C_STOP:
 741:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     * disable all RX interrupt sources.
 742:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     */
 743:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_SetRxInterruptMode(I2CS_NO_INTR_SOURCES);
 441              		.loc 1 743 0
 442 0250 0022     		mov	r2, #0
 443 0252 414B     		ldr	r3, .L37+84
 444 0254 1A60     		str	r2, [r3]
 445              	.L28:
 744:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 745:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 746:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_ClearRxInterruptSource(I2CS_INTR_RX_FULL);
 446              		.loc 1 746 0
 447 0256 0822     		mov	r2, #8
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 22


 448 0258 3E4B     		ldr	r3, .L37+80
 449 025a 1A60     		str	r2, [r3]
 450 025c 23E0     		b	.L29
 451              	.LVL17:
 452              	.L24:
 747:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             }
 748:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             /* I2CS_INTR_RX_NOT_EMPTY:
 749:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * The buffer size is less than 8: it requires processing in byte-by-byte mode.
 750:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             */
 751:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             else if(I2CS_CHECK_INTR_RX_MASKED(I2CS_INTR_RX_NOT_EMPTY))
 453              		.loc 1 751 0
 454 025e 454B     		ldr	r3, .L37+112
 455 0260 1B68     		ldr	r3, [r3]
 456 0262 5B07     		lsl	r3, r3, #29
 457 0264 1FD5     		bpl	.L29
 752:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             {
 753:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 diffCount = I2CS_RX_FIFO_RD_REG;
 458              		.loc 1 753 0
 459 0266 384B     		ldr	r3, .L37+68
 460 0268 1B68     		ldr	r3, [r3]
 461              	.LVL18:
 754:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 755:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 if(I2CS_slWrBufIndex < I2CS_slWrBufSize)
 462              		.loc 1 755 0
 463 026a 354A     		ldr	r2, .L37+60
 464 026c 1168     		ldr	r1, [r2]
 465 026e 3E4A     		ldr	r2, .L37+100
 466 0270 1268     		ldr	r2, [r2]
 467 0272 9142     		cmp	r1, r2
 468 0274 0DD2     		bcs	.L30
 756:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 757:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_I2C_SLAVE_GENERATE_ACK;
 469              		.loc 1 757 0
 470 0276 0121     		mov	r1, #1
 471 0278 3D4A     		ldr	r2, .L37+108
 472 027a 1160     		str	r1, [r2]
 758:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 759:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* Put data into component buffer */
 760:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_slWrBufPtr[I2CS_slWrBufIndex] = (uint8) diffCount;
 473              		.loc 1 760 0
 474 027c 304A     		ldr	r2, .L37+60
 475 027e 1168     		ldr	r1, [r2]
 476 0280 3048     		ldr	r0, .L37+64
 477 0282 0068     		ldr	r0, [r0]
 478 0284 4118     		add	r1, r0, r1
 479 0286 DBB2     		uxtb	r3, r3
 480              	.LVL19:
 481 0288 0B70     		strb	r3, [r1]
 761:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_slWrBufIndex++;
 482              		.loc 1 761 0
 483 028a 1368     		ldr	r3, [r2]
 484 028c 0133     		add	r3, r3, #1
 485 028e 1360     		str	r3, [r2]
 486 0290 06E0     		b	.L31
 487              	.LVL20:
 488              	.L30:
 762:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 23


 763:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 else /* Overflow: there is no space in write buffer */
 764:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 765:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_I2C_SLAVE_GENERATE_NACK;
 489              		.loc 1 765 0
 490 0292 FFF7FEFF 		bl	I2CS_I2CSlaveNackGeneration
 491              	.LVL21:
 766:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 767:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     I2CS_slStatus |= (uint8) I2CS_I2C_SSTAT_WR_OVFL;
 492              		.loc 1 767 0
 493 0296 204A     		ldr	r2, .L37+20
 494 0298 1178     		ldrb	r1, [r2]
 495 029a 4023     		mov	r3, #64
 496 029c 0B43     		orr	r3, r1
 497 029e 1370     		strb	r3, [r2]
 498              	.L31:
 768:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 769:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 770:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_ClearRxInterruptSource(I2CS_INTR_RX_NOT_EMPTY);
 499              		.loc 1 770 0
 500 02a0 0422     		mov	r2, #4
 501 02a2 2C4B     		ldr	r3, .L37+80
 502 02a4 1A60     		str	r2, [r3]
 503              	.LVL22:
 504              	.L29:
 771:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             }
 772:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             else
 773:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             {
 774:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 /* Does nothing */
 775:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             }
 776:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 777:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 778:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             /* I2CS_INTR_TX_EMPTY:
 779:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * The master reads the slave: provide data to read or 0xFF in the case of the end of th
 780:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * The overflow condition must be captured, but not set until the end of transaction.
 781:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             * There is a possibility of a false overflow due to TX FIFO utilization.
 782:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             */
 783:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             if(I2CS_CHECK_INTR_TX_MASKED(I2CS_INTR_TX_EMPTY))
 505              		.loc 1 783 0
 506 02a6 344B     		ldr	r3, .L37+116
 507 02a8 1B68     		ldr	r3, [r3]
 508 02aa DB06     		lsl	r3, r3, #27
 509 02ac 1FD4     		bmi	.L32
 510 02ae 94E0     		b	.L7
 511              	.L35:
 784:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             {
 785:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 while(I2CS_I2C_FIFO_SIZE != I2CS_GET_TX_FIFO_ENTRIES)
 786:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 787:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* Temporary slRdBufIndexTmp is used because the master can NACK the byte and
 788:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     * index roll-back is required in this case. The slRdBufIndex is updated at the 
 789:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     * of the read transfer.
 790:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     */
 791:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     if(I2CS_slRdBufIndexTmp < I2CS_slRdBufSize)
 512              		.loc 1 791 0
 513 02b0 1D4B     		ldr	r3, .L37+36
 514 02b2 1A68     		ldr	r2, [r3]
 515 02b4 314B     		ldr	r3, .L37+120
 516 02b6 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 24


 517 02b8 9A42     		cmp	r2, r3
 518 02ba 0CD2     		bcs	.L33
 792:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* Data from buffer */
 793:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     {
 794:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_TX_FIFO_WR_REG = (uint32) I2CS_slRdBufPtr[I2CS_slRdBufIndexTmp];
 519              		.loc 1 794 0
 520 02bc 1A4B     		ldr	r3, .L37+36
 521 02be 1A68     		ldr	r2, [r3]
 522 02c0 2F49     		ldr	r1, .L37+124
 523 02c2 0968     		ldr	r1, [r1]
 524 02c4 8A18     		add	r2, r1, r2
 525 02c6 1278     		ldrb	r2, [r2]
 526 02c8 D2B2     		uxtb	r2, r2
 527 02ca 2E49     		ldr	r1, .L37+128
 528 02cc 0A60     		str	r2, [r1]
 795:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_slRdBufIndexTmp++;
 529              		.loc 1 795 0
 530 02ce 1A68     		ldr	r2, [r3]
 531 02d0 0132     		add	r2, r2, #1
 532 02d2 1A60     		str	r2, [r3]
 533 02d4 0BE0     		b	.L32
 534              	.L33:
 796:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     }
 797:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     else
 798:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     /* Probably Overflow */
 799:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     {
 800:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         I2CS_TX_FIFO_WR_REG = I2CS_I2C_SLAVE_OVFL_RETURN;
 535              		.loc 1 800 0
 536 02d6 FF22     		mov	r2, #255
 537 02d8 2A4B     		ldr	r3, .L37+128
 538 02da 1A60     		str	r2, [r3]
 801:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 802:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         if(0u == (I2CS_INTR_TX_OVERFLOW & I2CS_slOverFlowCount))
 539              		.loc 1 802 0
 540 02dc 114B     		ldr	r3, .L37+32
 541 02de 1B78     		ldrb	r3, [r3]
 542 02e0 9B06     		lsl	r3, r3, #26
 543 02e2 04D4     		bmi	.L32
 803:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         {
 804:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             /* Get counter in range of byte: value 10 is overflow */
 805:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                             I2CS_slOverFlowCount++;
 544              		.loc 1 805 0
 545 02e4 0F4A     		ldr	r2, .L37+32
 546 02e6 1378     		ldrb	r3, [r2]
 547 02e8 0133     		add	r3, r3, #1
 548 02ea DBB2     		uxtb	r3, r3
 549 02ec 1370     		strb	r3, [r2]
 550              	.L32:
 785:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 {
 551              		.loc 1 785 0
 552 02ee 0C4B     		ldr	r3, .L37+28
 553 02f0 1B68     		ldr	r3, [r3]
 554 02f2 0F22     		mov	r2, #15
 555 02f4 1340     		and	r3, r2
 556 02f6 082B     		cmp	r3, #8
 557 02f8 DAD1     		bne	.L35
 806:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                         }
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 25


 807:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                     }
 808:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 }
 809:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 810:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****                 I2CS_ClearTxInterruptSource(I2CS_INTR_TX_EMPTY);
 558              		.loc 1 810 0
 559 02fa 0132     		add	r2, r2, #1
 560 02fc 224B     		ldr	r3, .L37+132
 561 02fe 1A60     		str	r2, [r3]
 562 0300 6BE0     		b	.L7
 563              	.L38:
 564 0302 C046     		.align	2
 565              	.L37:
 566 0304 00000000 		.word	I2CS_customIntrHandler
 567 0308 8C0E0640 		.word	1074138764
 568 030c 880E0640 		.word	1074138760
 569 0310 00000000 		.word	I2CS_state
 570 0314 4C0F0640 		.word	1074138956
 571 0318 00000000 		.word	I2CS_slStatus
 572 031c 400F0640 		.word	1074138944
 573 0320 08020640 		.word	1074135560
 574 0324 00000000 		.word	I2CS_slOverFlowCount
 575 0328 00000000 		.word	I2CS_slRdBufIndexTmp
 576 032c 00000000 		.word	I2CS_slRdBufIndex
 577 0330 880F0640 		.word	1074139016
 578 0334 04020640 		.word	1074135556
 579 0338 FFFFFEFF 		.word	-65537
 580 033c 60000640 		.word	1074135136
 581 0340 00000000 		.word	I2CS_slWrBufIndex
 582 0344 00000000 		.word	I2CS_slWrBufPtr
 583 0348 40030640 		.word	1074135872
 584 034c 08030640 		.word	1074135816
 585 0350 FF5FFFFF 		.word	-40961
 586 0354 C00F0640 		.word	1074139072
 587 0358 C80F0640 		.word	1074139080
 588 035c ED0F0000 		.word	4077
 589 0360 800E0640 		.word	1074138752
 590 0364 64000640 		.word	1074135140
 591 0368 00000000 		.word	I2CS_slWrBufSize
 592 036c FF0F0000 		.word	4095
 593 0370 6C000640 		.word	1074135148
 594 0374 CC0F0640 		.word	1074139084
 595 0378 8C0F0640 		.word	1074139020
 596 037c 00000000 		.word	I2CS_slRdBufSize
 597 0380 00000000 		.word	I2CS_slRdBufPtr
 598 0384 40020640 		.word	1074135616
 599 0388 800F0640 		.word	1074139008
 600              	.LVL23:
 601              	.L8:
 811:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****             }
 812:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 813:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         }  /* (I2CS_I2C_SLAVE) */
 814:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         #endif
 815:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     }
 816:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 817:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 818:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     /* FSM EXIT:
 819:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     * Slave:  INTR_SLAVE_I2C_BUS_ERROR, INTR_SLAVE_I2C_ARB_LOST
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 26


 820:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     * Master: INTR_MASTER_I2C_BUS_ERROR, INTR_MASTER_I2C_ARB_LOST.
 821:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     */
 822:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     else
 823:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     {
 824:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         I2CS_CTRL_REG &= (uint32) ~I2CS_CTRL_ENABLED; /* Disable scb IP */
 602              		.loc 1 824 0
 603 038c 144A     		ldr	r2, .L39
 604 038e 1368     		ldr	r3, [r2]
 605 0390 5B00     		lsl	r3, r3, #1
 606 0392 5B08     		lsr	r3, r3, #1
 607 0394 1360     		str	r3, [r2]
 825:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 826:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         I2CS_state = I2CS_I2C_FSM_IDLE;
 608              		.loc 1 826 0
 609 0396 1021     		mov	r1, #16
 610 0398 124B     		ldr	r3, .L39+4
 611 039a 1970     		strb	r1, [r3]
 827:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 828:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         I2CS_DISABLE_SLAVE_AUTO_DATA;
 612              		.loc 1 828 0
 613 039c 124B     		ldr	r3, .L39+8
 614 039e 1868     		ldr	r0, [r3]
 615 03a0 1249     		ldr	r1, .L39+12
 616 03a2 0140     		and	r1, r0
 617 03a4 1960     		str	r1, [r3]
 829:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         I2CS_DISABLE_MASTER_AUTO_DATA;
 618              		.loc 1 829 0
 619 03a6 1868     		ldr	r0, [r3]
 620 03a8 1149     		ldr	r1, .L39+16
 621 03aa 0140     		and	r1, r0
 622 03ac 1960     		str	r1, [r3]
 830:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 831:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     #if(I2CS_CY_SCBIP_V0)
 832:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         I2CS_SetRxInterruptMode(I2CS_NO_INTR_SOURCES);
 623              		.loc 1 832 0
 624 03ae 0023     		mov	r3, #0
 625 03b0 1049     		ldr	r1, .L39+20
 626 03b2 0B60     		str	r3, [r1]
 833:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         I2CS_SetTxInterruptMode(I2CS_NO_INTR_SOURCES);
 627              		.loc 1 833 0
 628 03b4 1049     		ldr	r1, .L39+24
 629 03b6 0B60     		str	r3, [r1]
 834:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 835:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         /* Clear interrupt sources as they are not automatically cleared after SCB is disabled */
 836:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         I2CS_ClearTxInterruptSource(I2CS_INTR_RX_ALL);
 630              		.loc 1 836 0
 631 03b8 1049     		ldr	r1, .L39+28
 632 03ba 114B     		ldr	r3, .L39+32
 633 03bc 1960     		str	r1, [r3]
 837:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         I2CS_ClearRxInterruptSource(I2CS_INTR_TX_ALL);
 634              		.loc 1 837 0
 635 03be 1149     		ldr	r1, .L39+36
 636 03c0 114B     		ldr	r3, .L39+40
 637 03c2 1960     		str	r1, [r3]
 838:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         I2CS_ClearSlaveInterruptSource(I2CS_INTR_SLAVE_ALL);
 638              		.loc 1 838 0
 639 03c4 1149     		ldr	r1, .L39+44
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 27


 640 03c6 124B     		ldr	r3, .L39+48
 641 03c8 1960     		str	r1, [r3]
 839:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         I2CS_ClearMasterInterruptSource(I2CS_INTR_MASTER_ALL);
 642              		.loc 1 839 0
 643 03ca 1249     		ldr	r1, .L39+52
 644 03cc 124B     		ldr	r3, .L39+56
 645 03ce 1960     		str	r1, [r3]
 840:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     #endif /* (I2CS_CY_SCBIP_V0) */
 841:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 842:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****         I2CS_CTRL_REG |= (uint32) I2CS_CTRL_ENABLED;  /* Enable scb IP */
 646              		.loc 1 842 0
 647 03d0 1368     		ldr	r3, [r2]
 648 03d2 8021     		mov	r1, #128
 649 03d4 0906     		lsl	r1, r1, #24
 650 03d6 0B43     		orr	r3, r1
 651 03d8 1360     		str	r3, [r2]
 652              	.LVL24:
 653              	.L7:
 843:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     }
 844:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** 
 845:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** #ifdef I2CS_I2C_ISR_EXIT_CALLBACK
 846:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     I2CS_I2C_ISR_ExitCallback();
 654              		.loc 1 846 0
 655 03da FFF7FEFF 		bl	I2CS_I2C_ISR_ExitCallback
 656              	.LVL25:
 847:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** #endif /* I2CS_I2C_ISR_EXIT_CALLBACK */
 848:.\Generated_Source\PSoC4/I2CS_I2C_INT.c ****     
 849:.\Generated_Source\PSoC4/I2CS_I2C_INT.c **** }
 657              		.loc 1 849 0
 658              		@ sp needed
 659 03de 10BD     		pop	{r4, pc}
 660              	.L40:
 661              		.align	2
 662              	.L39:
 663 03e0 00000640 		.word	1074135040
 664 03e4 00000000 		.word	I2CS_state
 665 03e8 60000640 		.word	1074135136
 666 03ec FF5FFFFF 		.word	-40961
 667 03f0 FFFCFFFF 		.word	-769
 668 03f4 C80F0640 		.word	1074139080
 669 03f8 880F0640 		.word	1074139016
 670 03fc ED0F0000 		.word	4077
 671 0400 800F0640 		.word	1074139008
 672 0404 F3070000 		.word	2035
 673 0408 C00F0640 		.word	1074139072
 674 040c FF0F0000 		.word	4095
 675 0410 400F0640 		.word	1074138944
 676 0414 17030000 		.word	791
 677 0418 000F0640 		.word	1074138880
 678              		.cfi_endproc
 679              	.LFE0:
 680              		.size	I2CS_I2C_ISR, .-I2CS_I2C_ISR
 681              		.text
 682              	.Letext0:
 683              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 684              		.file 3 ".\\Generated_Source\\PSoC4\\I2CS_PVT.h"
 685              		.file 4 ".\\Generated_Source\\PSoC4\\I2CS_I2C_PVT.h"
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 28


 686              		.file 5 ".\\Generated_Source\\PSoC4\\I2CS.h"
 687              		.file 6 "./cyapicallbacks.h"
 688              		.section	.debug_info,"",%progbits
 689              	.Ldebug_info0:
 690 0000 99010000 		.4byte	0x199
 691 0004 0400     		.2byte	0x4
 692 0006 00000000 		.4byte	.Ldebug_abbrev0
 693 000a 04       		.byte	0x4
 694 000b 01       		.uleb128 0x1
 695 000c A3010000 		.4byte	.LASF32
 696 0010 01       		.byte	0x1
 697 0011 EF000000 		.4byte	.LASF33
 698 0015 78000000 		.4byte	.LASF34
 699 0019 00000000 		.4byte	.Ldebug_ranges0+0
 700 001d 00000000 		.4byte	0
 701 0021 00000000 		.4byte	.Ldebug_line0
 702 0025 02       		.uleb128 0x2
 703 0026 01       		.byte	0x1
 704 0027 06       		.byte	0x6
 705 0028 96020000 		.4byte	.LASF0
 706 002c 02       		.uleb128 0x2
 707 002d 01       		.byte	0x1
 708 002e 08       		.byte	0x8
 709 002f 6A000000 		.4byte	.LASF1
 710 0033 02       		.uleb128 0x2
 711 0034 02       		.byte	0x2
 712 0035 05       		.byte	0x5
 713 0036 42020000 		.4byte	.LASF2
 714 003a 02       		.uleb128 0x2
 715 003b 02       		.byte	0x2
 716 003c 07       		.byte	0x7
 717 003d 45000000 		.4byte	.LASF3
 718 0041 02       		.uleb128 0x2
 719 0042 04       		.byte	0x4
 720 0043 05       		.byte	0x5
 721 0044 8D020000 		.4byte	.LASF4
 722 0048 02       		.uleb128 0x2
 723 0049 04       		.byte	0x4
 724 004a 07       		.byte	0x7
 725 004b AF000000 		.4byte	.LASF5
 726 004f 02       		.uleb128 0x2
 727 0050 08       		.byte	0x8
 728 0051 05       		.byte	0x5
 729 0052 85010000 		.4byte	.LASF6
 730 0056 02       		.uleb128 0x2
 731 0057 08       		.byte	0x8
 732 0058 07       		.byte	0x7
 733 0059 24010000 		.4byte	.LASF7
 734 005d 03       		.uleb128 0x3
 735 005e 04       		.byte	0x4
 736 005f 05       		.byte	0x5
 737 0060 696E7400 		.ascii	"int\000"
 738 0064 02       		.uleb128 0x2
 739 0065 04       		.byte	0x4
 740 0066 07       		.byte	0x7
 741 0067 17010000 		.4byte	.LASF8
 742 006b 04       		.uleb128 0x4
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 29


 743 006c CB000000 		.4byte	.LASF9
 744 0070 02       		.byte	0x2
 745 0071 3801     		.2byte	0x138
 746 0073 2C000000 		.4byte	0x2c
 747 0077 04       		.uleb128 0x4
 748 0078 E8000000 		.4byte	.LASF10
 749 007c 02       		.byte	0x2
 750 007d 3A01     		.2byte	0x13a
 751 007f 48000000 		.4byte	0x48
 752 0083 02       		.uleb128 0x2
 753 0084 04       		.byte	0x4
 754 0085 04       		.byte	0x4
 755 0086 64000000 		.4byte	.LASF11
 756 008a 02       		.uleb128 0x2
 757 008b 08       		.byte	0x8
 758 008c 04       		.byte	0x4
 759 008d D1000000 		.4byte	.LASF12
 760 0091 02       		.uleb128 0x2
 761 0092 01       		.byte	0x1
 762 0093 08       		.byte	0x8
 763 0094 93010000 		.4byte	.LASF13
 764 0098 05       		.uleb128 0x5
 765 0099 6B000000 		.4byte	0x6b
 766 009d 04       		.uleb128 0x4
 767 009e 0E000000 		.4byte	.LASF14
 768 00a2 02       		.byte	0x2
 769 00a3 E401     		.2byte	0x1e4
 770 00a5 A9000000 		.4byte	0xa9
 771 00a9 05       		.uleb128 0x5
 772 00aa 77000000 		.4byte	0x77
 773 00ae 04       		.uleb128 0x4
 774 00af 50010000 		.4byte	.LASF15
 775 00b3 02       		.byte	0x2
 776 00b4 F401     		.2byte	0x1f4
 777 00b6 BA000000 		.4byte	0xba
 778 00ba 06       		.uleb128 0x6
 779 00bb 04       		.byte	0x4
 780 00bc C0000000 		.4byte	0xc0
 781 00c0 07       		.uleb128 0x7
 782 00c1 02       		.uleb128 0x2
 783 00c2 04       		.byte	0x4
 784 00c3 07       		.byte	0x7
 785 00c4 7C010000 		.4byte	.LASF16
 786 00c8 08       		.uleb128 0x8
 787 00c9 5D010000 		.4byte	.LASF35
 788 00cd 01       		.byte	0x1
 789 00ce 25       		.byte	0x25
 790 00cf 00000000 		.4byte	.LFB0
 791 00d3 1C040000 		.4byte	.LFE0-.LFB0
 792 00d7 01       		.uleb128 0x1
 793 00d8 9C       		.byte	0x9c
 794 00d9 0E010000 		.4byte	0x10e
 795 00dd 09       		.uleb128 0x9
 796 00de C1000000 		.4byte	.LASF17
 797 00e2 01       		.byte	0x1
 798 00e3 27       		.byte	0x27
 799 00e4 77000000 		.4byte	0x77
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 30


 800 00e8 00000000 		.4byte	.LLST0
 801 00ec 09       		.uleb128 0x9
 802 00ed 58000000 		.4byte	.LASF18
 803 00f1 01       		.byte	0x1
 804 00f2 28       		.byte	0x28
 805 00f3 77000000 		.4byte	0x77
 806 00f7 6B000000 		.4byte	.LLST1
 807 00fb 0A       		.uleb128 0xa
 808 00fc 96020000 		.4byte	.LVL21
 809 0100 8D010000 		.4byte	0x18d
 810 0104 0A       		.uleb128 0xa
 811 0105 DE030000 		.4byte	.LVL25
 812 0109 95010000 		.4byte	0x195
 813 010d 00       		.byte	0
 814 010e 0B       		.uleb128 0xb
 815 010f 76020000 		.4byte	.LASF19
 816 0113 03       		.byte	0x3
 817 0114 3A       		.byte	0x3a
 818 0115 AE000000 		.4byte	0xae
 819 0119 0B       		.uleb128 0xb
 820 011a 98010000 		.4byte	.LASF20
 821 011e 04       		.byte	0x4
 822 011f 1D       		.byte	0x1d
 823 0120 98000000 		.4byte	0x98
 824 0124 0B       		.uleb128 0xb
 825 0125 00000000 		.4byte	.LASF21
 826 0129 04       		.byte	0x4
 827 012a 20       		.byte	0x20
 828 012b 98000000 		.4byte	0x98
 829 012f 0B       		.uleb128 0xb
 830 0130 4C020000 		.4byte	.LASF22
 831 0134 04       		.byte	0x4
 832 0135 23       		.byte	0x23
 833 0136 3A010000 		.4byte	0x13a
 834 013a 06       		.uleb128 0x6
 835 013b 04       		.byte	0x4
 836 013c 98000000 		.4byte	0x98
 837 0140 0B       		.uleb128 0xb
 838 0141 31020000 		.4byte	.LASF23
 839 0145 04       		.byte	0x4
 840 0146 24       		.byte	0x24
 841 0147 A9000000 		.4byte	0xa9
 842 014b 0B       		.uleb128 0xb
 843 014c 9D000000 		.4byte	.LASF24
 844 0150 04       		.byte	0x4
 845 0151 25       		.byte	0x25
 846 0152 A9000000 		.4byte	0xa9
 847 0156 0B       		.uleb128 0xb
 848 0157 D8000000 		.4byte	.LASF25
 849 015b 04       		.byte	0x4
 850 015c 28       		.byte	0x28
 851 015d 3A010000 		.4byte	0x13a
 852 0161 0B       		.uleb128 0xb
 853 0162 A2020000 		.4byte	.LASF26
 854 0166 04       		.byte	0x4
 855 0167 29       		.byte	0x29
 856 0168 A9000000 		.4byte	0xa9
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 31


 857 016c 0B       		.uleb128 0xb
 858 016d 6A010000 		.4byte	.LASF27
 859 0171 04       		.byte	0x4
 860 0172 2A       		.byte	0x2a
 861 0173 A9000000 		.4byte	0xa9
 862 0177 0B       		.uleb128 0xb
 863 0178 3B010000 		.4byte	.LASF28
 864 017c 04       		.byte	0x4
 865 017d 2B       		.byte	0x2b
 866 017e A9000000 		.4byte	0xa9
 867 0182 0B       		.uleb128 0xb
 868 0183 30000000 		.4byte	.LASF29
 869 0187 04       		.byte	0x4
 870 0188 2C       		.byte	0x2c
 871 0189 98000000 		.4byte	0x98
 872 018d 0C       		.uleb128 0xc
 873 018e 14000000 		.4byte	.LASF30
 874 0192 05       		.byte	0x5
 875 0193 1005     		.2byte	0x510
 876 0195 0D       		.uleb128 0xd
 877 0196 5C020000 		.4byte	.LASF31
 878 019a 06       		.byte	0x6
 879 019b 10       		.byte	0x10
 880 019c 00       		.byte	0
 881              		.section	.debug_abbrev,"",%progbits
 882              	.Ldebug_abbrev0:
 883 0000 01       		.uleb128 0x1
 884 0001 11       		.uleb128 0x11
 885 0002 01       		.byte	0x1
 886 0003 25       		.uleb128 0x25
 887 0004 0E       		.uleb128 0xe
 888 0005 13       		.uleb128 0x13
 889 0006 0B       		.uleb128 0xb
 890 0007 03       		.uleb128 0x3
 891 0008 0E       		.uleb128 0xe
 892 0009 1B       		.uleb128 0x1b
 893 000a 0E       		.uleb128 0xe
 894 000b 55       		.uleb128 0x55
 895 000c 17       		.uleb128 0x17
 896 000d 11       		.uleb128 0x11
 897 000e 01       		.uleb128 0x1
 898 000f 10       		.uleb128 0x10
 899 0010 17       		.uleb128 0x17
 900 0011 00       		.byte	0
 901 0012 00       		.byte	0
 902 0013 02       		.uleb128 0x2
 903 0014 24       		.uleb128 0x24
 904 0015 00       		.byte	0
 905 0016 0B       		.uleb128 0xb
 906 0017 0B       		.uleb128 0xb
 907 0018 3E       		.uleb128 0x3e
 908 0019 0B       		.uleb128 0xb
 909 001a 03       		.uleb128 0x3
 910 001b 0E       		.uleb128 0xe
 911 001c 00       		.byte	0
 912 001d 00       		.byte	0
 913 001e 03       		.uleb128 0x3
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 32


 914 001f 24       		.uleb128 0x24
 915 0020 00       		.byte	0
 916 0021 0B       		.uleb128 0xb
 917 0022 0B       		.uleb128 0xb
 918 0023 3E       		.uleb128 0x3e
 919 0024 0B       		.uleb128 0xb
 920 0025 03       		.uleb128 0x3
 921 0026 08       		.uleb128 0x8
 922 0027 00       		.byte	0
 923 0028 00       		.byte	0
 924 0029 04       		.uleb128 0x4
 925 002a 16       		.uleb128 0x16
 926 002b 00       		.byte	0
 927 002c 03       		.uleb128 0x3
 928 002d 0E       		.uleb128 0xe
 929 002e 3A       		.uleb128 0x3a
 930 002f 0B       		.uleb128 0xb
 931 0030 3B       		.uleb128 0x3b
 932 0031 05       		.uleb128 0x5
 933 0032 49       		.uleb128 0x49
 934 0033 13       		.uleb128 0x13
 935 0034 00       		.byte	0
 936 0035 00       		.byte	0
 937 0036 05       		.uleb128 0x5
 938 0037 35       		.uleb128 0x35
 939 0038 00       		.byte	0
 940 0039 49       		.uleb128 0x49
 941 003a 13       		.uleb128 0x13
 942 003b 00       		.byte	0
 943 003c 00       		.byte	0
 944 003d 06       		.uleb128 0x6
 945 003e 0F       		.uleb128 0xf
 946 003f 00       		.byte	0
 947 0040 0B       		.uleb128 0xb
 948 0041 0B       		.uleb128 0xb
 949 0042 49       		.uleb128 0x49
 950 0043 13       		.uleb128 0x13
 951 0044 00       		.byte	0
 952 0045 00       		.byte	0
 953 0046 07       		.uleb128 0x7
 954 0047 15       		.uleb128 0x15
 955 0048 00       		.byte	0
 956 0049 27       		.uleb128 0x27
 957 004a 19       		.uleb128 0x19
 958 004b 00       		.byte	0
 959 004c 00       		.byte	0
 960 004d 08       		.uleb128 0x8
 961 004e 2E       		.uleb128 0x2e
 962 004f 01       		.byte	0x1
 963 0050 3F       		.uleb128 0x3f
 964 0051 19       		.uleb128 0x19
 965 0052 03       		.uleb128 0x3
 966 0053 0E       		.uleb128 0xe
 967 0054 3A       		.uleb128 0x3a
 968 0055 0B       		.uleb128 0xb
 969 0056 3B       		.uleb128 0x3b
 970 0057 0B       		.uleb128 0xb
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 33


 971 0058 27       		.uleb128 0x27
 972 0059 19       		.uleb128 0x19
 973 005a 11       		.uleb128 0x11
 974 005b 01       		.uleb128 0x1
 975 005c 12       		.uleb128 0x12
 976 005d 06       		.uleb128 0x6
 977 005e 40       		.uleb128 0x40
 978 005f 18       		.uleb128 0x18
 979 0060 9642     		.uleb128 0x2116
 980 0062 19       		.uleb128 0x19
 981 0063 01       		.uleb128 0x1
 982 0064 13       		.uleb128 0x13
 983 0065 00       		.byte	0
 984 0066 00       		.byte	0
 985 0067 09       		.uleb128 0x9
 986 0068 34       		.uleb128 0x34
 987 0069 00       		.byte	0
 988 006a 03       		.uleb128 0x3
 989 006b 0E       		.uleb128 0xe
 990 006c 3A       		.uleb128 0x3a
 991 006d 0B       		.uleb128 0xb
 992 006e 3B       		.uleb128 0x3b
 993 006f 0B       		.uleb128 0xb
 994 0070 49       		.uleb128 0x49
 995 0071 13       		.uleb128 0x13
 996 0072 02       		.uleb128 0x2
 997 0073 17       		.uleb128 0x17
 998 0074 00       		.byte	0
 999 0075 00       		.byte	0
 1000 0076 0A       		.uleb128 0xa
 1001 0077 898201   		.uleb128 0x4109
 1002 007a 00       		.byte	0
 1003 007b 11       		.uleb128 0x11
 1004 007c 01       		.uleb128 0x1
 1005 007d 31       		.uleb128 0x31
 1006 007e 13       		.uleb128 0x13
 1007 007f 00       		.byte	0
 1008 0080 00       		.byte	0
 1009 0081 0B       		.uleb128 0xb
 1010 0082 34       		.uleb128 0x34
 1011 0083 00       		.byte	0
 1012 0084 03       		.uleb128 0x3
 1013 0085 0E       		.uleb128 0xe
 1014 0086 3A       		.uleb128 0x3a
 1015 0087 0B       		.uleb128 0xb
 1016 0088 3B       		.uleb128 0x3b
 1017 0089 0B       		.uleb128 0xb
 1018 008a 49       		.uleb128 0x49
 1019 008b 13       		.uleb128 0x13
 1020 008c 3F       		.uleb128 0x3f
 1021 008d 19       		.uleb128 0x19
 1022 008e 3C       		.uleb128 0x3c
 1023 008f 19       		.uleb128 0x19
 1024 0090 00       		.byte	0
 1025 0091 00       		.byte	0
 1026 0092 0C       		.uleb128 0xc
 1027 0093 2E       		.uleb128 0x2e
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 34


 1028 0094 00       		.byte	0
 1029 0095 3F       		.uleb128 0x3f
 1030 0096 19       		.uleb128 0x19
 1031 0097 03       		.uleb128 0x3
 1032 0098 0E       		.uleb128 0xe
 1033 0099 3A       		.uleb128 0x3a
 1034 009a 0B       		.uleb128 0xb
 1035 009b 3B       		.uleb128 0x3b
 1036 009c 05       		.uleb128 0x5
 1037 009d 27       		.uleb128 0x27
 1038 009e 19       		.uleb128 0x19
 1039 009f 3C       		.uleb128 0x3c
 1040 00a0 19       		.uleb128 0x19
 1041 00a1 00       		.byte	0
 1042 00a2 00       		.byte	0
 1043 00a3 0D       		.uleb128 0xd
 1044 00a4 2E       		.uleb128 0x2e
 1045 00a5 00       		.byte	0
 1046 00a6 3F       		.uleb128 0x3f
 1047 00a7 19       		.uleb128 0x19
 1048 00a8 03       		.uleb128 0x3
 1049 00a9 0E       		.uleb128 0xe
 1050 00aa 3A       		.uleb128 0x3a
 1051 00ab 0B       		.uleb128 0xb
 1052 00ac 3B       		.uleb128 0x3b
 1053 00ad 0B       		.uleb128 0xb
 1054 00ae 27       		.uleb128 0x27
 1055 00af 19       		.uleb128 0x19
 1056 00b0 3C       		.uleb128 0x3c
 1057 00b1 19       		.uleb128 0x19
 1058 00b2 00       		.byte	0
 1059 00b3 00       		.byte	0
 1060 00b4 00       		.byte	0
 1061              		.section	.debug_loc,"",%progbits
 1062              	.Ldebug_loc0:
 1063              	.LLST0:
 1064 0000 9A000000 		.4byte	.LVL2
 1065 0004 AA000000 		.4byte	.LVL3
 1066 0008 0100     		.2byte	0x1
 1067 000a 53       		.byte	0x53
 1068 000b B0000000 		.4byte	.LVL4
 1069 000f B6000000 		.4byte	.LVL5
 1070 0013 0100     		.2byte	0x1
 1071 0015 53       		.byte	0x53
 1072 0016 B4010000 		.4byte	.LVL6
 1073 001a BC010000 		.4byte	.LVL7
 1074 001e 0100     		.2byte	0x1
 1075 0020 53       		.byte	0x53
 1076 0021 C0010000 		.4byte	.LVL8
 1077 0025 C8010000 		.4byte	.LVL9
 1078 0029 0100     		.2byte	0x1
 1079 002b 53       		.byte	0x53
 1080 002c D2010000 		.4byte	.LVL10
 1081 0030 D6010000 		.4byte	.LVL11
 1082 0034 0100     		.2byte	0x1
 1083 0036 53       		.byte	0x53
 1084 0037 14020000 		.4byte	.LVL12
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 35


 1085 003b 1C020000 		.4byte	.LVL13
 1086 003f 0100     		.2byte	0x1
 1087 0041 50       		.byte	0x50
 1088 0042 1E020000 		.4byte	.LVL14
 1089 0046 5E020000 		.4byte	.LVL17
 1090 004a 0100     		.2byte	0x1
 1091 004c 50       		.byte	0x50
 1092 004d 6A020000 		.4byte	.LVL18
 1093 0051 88020000 		.4byte	.LVL19
 1094 0055 0100     		.2byte	0x1
 1095 0057 53       		.byte	0x53
 1096 0058 92020000 		.4byte	.LVL20
 1097 005c 95020000 		.4byte	.LVL21-1
 1098 0060 0100     		.2byte	0x1
 1099 0062 53       		.byte	0x53
 1100 0063 00000000 		.4byte	0
 1101 0067 00000000 		.4byte	0
 1102              	.LLST1:
 1103 006b 02000000 		.4byte	.LVL0
 1104 006f 22020000 		.4byte	.LVL15
 1105 0073 0200     		.2byte	0x2
 1106 0075 30       		.byte	0x30
 1107 0076 9F       		.byte	0x9f
 1108 0077 22020000 		.4byte	.LVL15
 1109 007b 5E020000 		.4byte	.LVL17
 1110 007f 0100     		.2byte	0x1
 1111 0081 54       		.byte	0x54
 1112 0082 5E020000 		.4byte	.LVL17
 1113 0086 A6020000 		.4byte	.LVL22
 1114 008a 0200     		.2byte	0x2
 1115 008c 30       		.byte	0x30
 1116 008d 9F       		.byte	0x9f
 1117 008e 8C030000 		.4byte	.LVL23
 1118 0092 DA030000 		.4byte	.LVL24
 1119 0096 0200     		.2byte	0x2
 1120 0098 30       		.byte	0x30
 1121 0099 9F       		.byte	0x9f
 1122 009a 00000000 		.4byte	0
 1123 009e 00000000 		.4byte	0
 1124              		.section	.debug_aranges,"",%progbits
 1125 0000 1C000000 		.4byte	0x1c
 1126 0004 0200     		.2byte	0x2
 1127 0006 00000000 		.4byte	.Ldebug_info0
 1128 000a 04       		.byte	0x4
 1129 000b 00       		.byte	0
 1130 000c 0000     		.2byte	0
 1131 000e 0000     		.2byte	0
 1132 0010 00000000 		.4byte	.LFB0
 1133 0014 1C040000 		.4byte	.LFE0-.LFB0
 1134 0018 00000000 		.4byte	0
 1135 001c 00000000 		.4byte	0
 1136              		.section	.debug_ranges,"",%progbits
 1137              	.Ldebug_ranges0:
 1138 0000 00000000 		.4byte	.LFB0
 1139 0004 1C040000 		.4byte	.LFE0
 1140 0008 00000000 		.4byte	0
 1141 000c 00000000 		.4byte	0
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 36


 1142              		.section	.debug_line,"",%progbits
 1143              	.Ldebug_line0:
 1144 0000 60010000 		.section	.debug_str,"MS",%progbits,1
 1144      0200A200 
 1144      00000201 
 1144      FB0E0D00 
 1144      01010101 
 1145              	.LASF21:
 1146 0000 49324353 		.ascii	"I2CS_slStatus\000"
 1146      5F736C53 
 1146      74617475 
 1146      7300
 1147              	.LASF14:
 1148 000e 72656733 		.ascii	"reg32\000"
 1148      3200
 1149              	.LASF30:
 1150 0014 49324353 		.ascii	"I2CS_I2CSlaveNackGeneration\000"
 1150      5F493243 
 1150      536C6176 
 1150      654E6163 
 1150      6B47656E 
 1151              	.LASF29:
 1152 0030 49324353 		.ascii	"I2CS_slOverFlowCount\000"
 1152      5F736C4F 
 1152      76657246 
 1152      6C6F7743 
 1152      6F756E74 
 1153              	.LASF3:
 1154 0045 73686F72 		.ascii	"short unsigned int\000"
 1154      7420756E 
 1154      7369676E 
 1154      65642069 
 1154      6E7400
 1155              	.LASF18:
 1156 0058 656E6454 		.ascii	"endTransfer\000"
 1156      72616E73 
 1156      66657200 
 1157              	.LASF11:
 1158 0064 666C6F61 		.ascii	"float\000"
 1158      7400
 1159              	.LASF1:
 1160 006a 756E7369 		.ascii	"unsigned char\000"
 1160      676E6564 
 1160      20636861 
 1160      7200
 1161              	.LASF34:
 1162 0078 433A5C45 		.ascii	"C:\\E3PRJ3-Gruppe1\\PSoC\\PSoC4XY.cydsn\000"
 1162      3350524A 
 1162      332D4772 
 1162      75707065 
 1162      315C5053 
 1163              	.LASF24:
 1164 009d 49324353 		.ascii	"I2CS_slWrBufIndex\000"
 1164      5F736C57 
 1164      72427566 
 1164      496E6465 
 1164      7800
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 37


 1165              	.LASF5:
 1166 00af 6C6F6E67 		.ascii	"long unsigned int\000"
 1166      20756E73 
 1166      69676E65 
 1166      6420696E 
 1166      7400
 1167              	.LASF17:
 1168 00c1 64696666 		.ascii	"diffCount\000"
 1168      436F756E 
 1168      7400
 1169              	.LASF9:
 1170 00cb 75696E74 		.ascii	"uint8\000"
 1170      3800
 1171              	.LASF12:
 1172 00d1 646F7562 		.ascii	"double\000"
 1172      6C6500
 1173              	.LASF25:
 1174 00d8 49324353 		.ascii	"I2CS_slRdBufPtr\000"
 1174      5F736C52 
 1174      64427566 
 1174      50747200 
 1175              	.LASF10:
 1176 00e8 75696E74 		.ascii	"uint32\000"
 1176      333200
 1177              	.LASF33:
 1178 00ef 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\I2CS_I2C_INT.c\000"
 1178      6E657261 
 1178      7465645F 
 1178      536F7572 
 1178      63655C50 
 1179              	.LASF8:
 1180 0117 756E7369 		.ascii	"unsigned int\000"
 1180      676E6564 
 1180      20696E74 
 1180      00
 1181              	.LASF7:
 1182 0124 6C6F6E67 		.ascii	"long long unsigned int\000"
 1182      206C6F6E 
 1182      6720756E 
 1182      7369676E 
 1182      65642069 
 1183              	.LASF28:
 1184 013b 49324353 		.ascii	"I2CS_slRdBufIndexTmp\000"
 1184      5F736C52 
 1184      64427566 
 1184      496E6465 
 1184      78546D70 
 1185              	.LASF15:
 1186 0150 63796973 		.ascii	"cyisraddress\000"
 1186      72616464 
 1186      72657373 
 1186      00
 1187              	.LASF35:
 1188 015d 49324353 		.ascii	"I2CS_I2C_ISR\000"
 1188      5F493243 
 1188      5F495352 
 1188      00
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 38


 1189              	.LASF27:
 1190 016a 49324353 		.ascii	"I2CS_slRdBufIndex\000"
 1190      5F736C52 
 1190      64427566 
 1190      496E6465 
 1190      7800
 1191              	.LASF16:
 1192 017c 73697A65 		.ascii	"sizetype\000"
 1192      74797065 
 1192      00
 1193              	.LASF6:
 1194 0185 6C6F6E67 		.ascii	"long long int\000"
 1194      206C6F6E 
 1194      6720696E 
 1194      7400
 1195              	.LASF13:
 1196 0193 63686172 		.ascii	"char\000"
 1196      00
 1197              	.LASF20:
 1198 0198 49324353 		.ascii	"I2CS_state\000"
 1198      5F737461 
 1198      746500
 1199              	.LASF32:
 1200 01a3 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1200      4320342E 
 1200      392E3320 
 1200      32303135 
 1200      30333033 
 1201 01d6 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 1201      20726576 
 1201      6973696F 
 1201      6E203232 
 1201      31323230 
 1202 0209 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1202      66756E63 
 1202      74696F6E 
 1202      2D736563 
 1202      74696F6E 
 1203              	.LASF23:
 1204 0231 49324353 		.ascii	"I2CS_slWrBufSize\000"
 1204      5F736C57 
 1204      72427566 
 1204      53697A65 
 1204      00
 1205              	.LASF2:
 1206 0242 73686F72 		.ascii	"short int\000"
 1206      7420696E 
 1206      7400
 1207              	.LASF22:
 1208 024c 49324353 		.ascii	"I2CS_slWrBufPtr\000"
 1208      5F736C57 
 1208      72427566 
 1208      50747200 
 1209              	.LASF31:
 1210 025c 49324353 		.ascii	"I2CS_I2C_ISR_ExitCallback\000"
 1210      5F493243 
 1210      5F495352 
ARM GAS  C:\Users\JEPPES~1\AppData\Local\Temp\ccckbVdL.s 			page 39


 1210      5F457869 
 1210      7443616C 
 1211              	.LASF19:
 1212 0276 49324353 		.ascii	"I2CS_customIntrHandler\000"
 1212      5F637573 
 1212      746F6D49 
 1212      6E747248 
 1212      616E646C 
 1213              	.LASF4:
 1214 028d 6C6F6E67 		.ascii	"long int\000"
 1214      20696E74 
 1214      00
 1215              	.LASF0:
 1216 0296 7369676E 		.ascii	"signed char\000"
 1216      65642063 
 1216      68617200 
 1217              	.LASF26:
 1218 02a2 49324353 		.ascii	"I2CS_slRdBufSize\000"
 1218      5F736C52 
 1218      64427566 
 1218      53697A65 
 1218      00
 1219              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
